" Settings:
set laststatus=2 showtabline=2 ruler
set tabstop=4    softtabstop=4 shiftwidth=4
set expandtab    autoindent
set number       relativenumber
set list         listchars="tab:▸-,trail:●
set hidden       noswapfile
set undofile     undodir=~/_vim/undodir/
set wildmenu     wildignorecase
set hlsearch     incsearch
set ignorecase   smartcase
set splitbelow   splitright
set autoread
set backspace=indent,eol,start

" Mappings:
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR>
nnoremap <silent><leader>json :%!python -m json.tool<cr>
nnoremap <right> :bn<cr>
nnoremap <left> :bp<cr>
cnoremap <expr> w!! 'w !sudo tee % > /dev/null'

" CCToggle:
command! CCToggle call CCToggle()
function! g:CCToggle()
    if &colorcolumn != '' | setlocal colorcolumn&
    else                  | setlocal colorcolumn=80,100
    endif
endfunction

" StripWhitespace:
command! StripWhitespace call StripWhitespace()
function! g:StripWhitespace()
    let whitespaces  = '[\u0009\u0020\u00a0\u1680\u180e\u2000-'
    let whitespaces .= '\u200b\u202f\u205f\u3000\ufeff]'
    let pattern      = whitespaces . '\+$'
    let line         = line(".")
    let column       = col(".")
    silent! execute ':0,' . line("$") . 's/' . pattern . '//e'
    call histdel('search', -1)
    call cursor(line, column)
endfunction

" Plugins:
filetype plugin on
syntax on

" source ~/_vim/files/eqalignsimple_vim

call plug#begin('~/_vim/plugged')
    Plug 'mbbill/undotree',    { 'on': 'UndotreeToggle' }
    Plug 'tpope/vim-commentary'
    " Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-surround'
    Plug 'vimwiki/vimwiki'

    " Plug 'ghifarit53/tokyonight-vim'
    Plug 'junegunn/seoul256.vim'

    Plug 'junegunn/goyo.vim'
    Plug 'junegunn/limelight.vim'
    Plug 'junegunn/vim-peekaboo'

    Plug 'junegunn/vim-journal'
call plug#end()

let mywiki         = {}
let mywiki.path    = 'D:\linux\vimwiki'
let g:vimwiki_list = [ mywiki ]

" Undotree
let g:undotree_WindowLayout         = 2
let g:undotree_HighlightChangedText = 0
function! g:Undotree_CustomMap()
    nmap <buffer> k <plug>UndotreeNextState
    nmap <buffer> j <plug>UndotreePreviousState
endfunc

cd D:\Documents
